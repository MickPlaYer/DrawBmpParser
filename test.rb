#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'

require "./lexer.rb"
require "./shapes.rb"
require "./bmp/writer.rb"

class DrawShapeParser < Racc::Parser

module_eval(<<'...end draw_bmp_parser.y/module_eval...', 'draw_bmp_parser.y', 43)
  def parse str 
    @shapes = Hash.new
    @points = Hash.new
    @color = 'ffffff'
    @lexer = make_lexer str
    do_parse
  end

  def next_token
    @lexer.next_token
  end

  def make_lexer str
    keywords = ['canvas', 'pen', 'draw', 'circle', 'rectangle', 'as', 'at']
    lexer = Lexer.new
    lexer.add_ignore(/\s+/)
    keywords.each do |kw|
      lexer.add_keyword kw
    end
    lexer.add_token(/\d+/, :NUMBER)
    lexer.add_token(/\w+/, :WORD)
    lexer.start str
    return lexer
  end

  def save_bmp name
    @bitmap.save_as(name + '.bmp')
  end

...end draw_bmp_parser.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    29,    29,    21,    22,    20,    14,    14,    14,    18,    19,
    20,    14,    10,    11,    18,    19,    12,    10,    11,    15,
    14,    12,    14,    14,     3,     4,    14,    14,    14,    14 ]

racc_action_check = [
    17,    22,    11,    11,    21,    13,    17,    22,    21,    21,
    10,    12,     2,     2,    10,    10,     2,     6,     6,     4,
     3,     6,    18,    19,     0,     1,    24,    28,    31,    34 ]

racc_action_pointer = [
    22,    25,     9,    10,    19,   nil,    14,   nil,   nil,   nil,
     6,    -3,     1,    -5,   nil,   nil,   nil,    -4,    12,    13,
   nil,     0,    -3,   nil,    16,   nil,   nil,   nil,    17,   nil,
   nil,    18,   nil,   nil,    19,   nil,   nil,   nil ]

racc_action_default = [
   -20,   -20,   -20,   -20,   -20,    -1,    -3,    -5,    -6,    -7,
   -20,   -20,   -20,   -20,   -19,    38,    -4,   -20,   -20,   -20,
   -16,   -20,   -20,   -11,   -20,   -13,    -2,    -8,   -20,   -18,
   -14,   -20,    -9,   -10,   -20,   -17,   -15,   -12 ]

racc_goto_table = [
    13,    24,    27,     2,     5,    23,    17,    33,    16,     1,
    26,   nil,   nil,    34,    28,    30,    31,    32,   nil,    28,
   nil,   nil,   nil,    37,   nil,    35,   nil,   nil,    36 ]

racc_goto_check = [
     4,    12,    10,     2,     3,    11,     9,    10,     3,     1,
     4,   nil,   nil,    12,     4,     4,     4,     9,   nil,     4,
   nil,   nil,   nil,    12,   nil,     4,   nil,   nil,     4 ]

racc_goto_pointer = [
   nil,     9,     3,     2,    -3,   nil,   nil,   nil,   nil,    -4,
   -15,    -7,   -11 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,    25,     6,     7,     8,     9,   nil,
   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  2, 12, :_reduce_none,
  3, 13, :_reduce_2,
  1, 14, :_reduce_none,
  2, 14, :_reduce_none,
  1, 16, :_reduce_none,
  1, 16, :_reduce_none,
  1, 16, :_reduce_none,
  3, 17, :_reduce_8,
  3, 18, :_reduce_9,
  3, 18, :_reduce_10,
  2, 19, :_reduce_11,
  3, 22, :_reduce_12,
  1, 23, :_reduce_13,
  2, 20, :_reduce_14,
  3, 20, :_reduce_15,
  1, 20, :_reduce_16,
  2, 21, :_reduce_17,
  1, 21, :_reduce_18,
  1, 15, :_reduce_19 ]

racc_reduce_n = 20

racc_shift_n = 38

racc_token_table = {
  false => 0,
  :error => 1,
  "canvas" => 2,
  "draw" => 3,
  :WORD => 4,
  "as" => 5,
  "at" => 6,
  "pen" => 7,
  "circle" => 8,
  "rectangle" => 9,
  :NUMBER => 10 }

racc_nt_base = 11

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "\"canvas\"",
  "\"draw\"",
  "WORD",
  "\"as\"",
  "\"at\"",
  "\"pen\"",
  "\"circle\"",
  "\"rectangle\"",
  "NUMBER",
  "$start",
  "start",
  "canvas",
  "methods",
  "number",
  "method",
  "draw",
  "declare",
  "pen",
  "shape",
  "point",
  "rgb",
  "hex" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

module_eval(<<'.,.,', 'draw_bmp_parser.y', 6)
  def _reduce_2(val, _values, result)
     @bitmap = BMP::Writer.new val[1], val[2] 
    result
  end
.,.,

# reduce 3 omitted

# reduce 4 omitted

# reduce 5 omitted

# reduce 6 omitted

# reduce 7 omitted

module_eval(<<'.,.,', 'draw_bmp_parser.y', 15)
  def _reduce_8(val, _values, result)
     val[1].draw @bitmap, @color, val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'draw_bmp_parser.y', 17)
  def _reduce_9(val, _values, result)
     @shapes[val[0]] = val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'draw_bmp_parser.y', 18)
  def _reduce_10(val, _values, result)
     @points[val[0]] = val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'draw_bmp_parser.y', 20)
  def _reduce_11(val, _values, result)
     @color = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'draw_bmp_parser.y', 22)
  def _reduce_12(val, _values, result)
     result = val[2] + val[1] + val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'draw_bmp_parser.y', 24)
  def _reduce_13(val, _values, result)
     result = "%02x" % val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'draw_bmp_parser.y', 26)
  def _reduce_14(val, _values, result)
     result = Circle.new val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'draw_bmp_parser.y', 27)
  def _reduce_15(val, _values, result)
     result = Rectangle.new val[1], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'draw_bmp_parser.y', 28)
  def _reduce_16(val, _values, result)
     result = @shapes[val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'draw_bmp_parser.y', 30)
  def _reduce_17(val, _values, result)
     result = Point.new val[0], val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'draw_bmp_parser.y', 31)
  def _reduce_18(val, _values, result)
     result = @points[val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'draw_bmp_parser.y', 33)
  def _reduce_19(val, _values, result)
     result = val[0].to_i 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class DrawShapeParser

if $0 == __FILE__
  parser = DrawShapeParser.new
  # Get data for parse from file.
  file_path = ARGV[0] || "example.txt"
  file = File.open(file_path, "rb")
  contents = file.read
  file.close
  # Show what to parse.
  puts "Parsing:\n" + contents.to_s
  puts
  puts 'Result:'
  # Do parse.
  begin
    parser.parse(contents)
  rescue ParseError
    puts $!
  end
  puts 'Saving bitmap...'
  parser.save_bmp File.basename(file_path, ".*")
  puts 'End!'
end
