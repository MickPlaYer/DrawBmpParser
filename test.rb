#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'

require "./lexer.rb"
require "./shapes.rb"

class DrawShapeParser < Racc::Parser

module_eval(<<'...end draw_bmp_parser.y/module_eval...', 'draw_bmp_parser.y', 24)
  def parse(str)
    @shapes = Hash.new
    @lexer = make_lexer str
    do_parse
  end

  def next_token
    @lexer.next_token
  end

  def make_lexer str
    keywords = ['draw', 'circle', 'rectangle', 'as']
    lexer = Lexer.new
    lexer.add_ignore(/\s+/)
    keywords.each do |kw|
      lexer.add_keyword kw
    end
    lexer.add_token(/\d+/, :NUMBER)
    lexer.add_token(/\w+/, :WORD)
    lexer.start str
    return lexer
  end

...end draw_bmp_parser.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    12,    12,    10,    10,    11,    11,     5,     6,     5,     6,
    14,    13,    15,    16,     7,    18 ]

racc_action_check = [
     5,    13,     5,    13,     5,    13,     2,     2,     0,     0,
     7,     6,    10,    11,     1,    16 ]

racc_action_pointer = [
     6,    14,     4,   nil,   nil,    -3,     7,    10,   nil,   nil,
     6,     7,   nil,    -2,   nil,   nil,     9,   nil,   nil ]

racc_action_default = [
   -10,   -10,    -1,    -3,    -4,   -10,   -10,   -10,    -2,    -5,
   -10,   -10,    -9,   -10,    19,    -7,   -10,    -6,    -8 ]

racc_goto_table = [
     9,     1,   nil,     8,   nil,   nil,   nil,   nil,    17 ]

racc_goto_check = [
     5,     1,   nil,     1,   nil,   nil,   nil,   nil,     5 ]

racc_goto_pointer = [
   nil,     1,   nil,   nil,   nil,    -5 ]

racc_goto_default = [
   nil,   nil,     2,     3,     4,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 9, :_reduce_none,
  2, 9, :_reduce_none,
  1, 10, :_reduce_none,
  1, 10, :_reduce_none,
  2, 11, :_reduce_5,
  3, 12, :_reduce_6,
  2, 13, :_reduce_7,
  3, 13, :_reduce_8,
  1, 13, :_reduce_9 ]

racc_reduce_n = 10

racc_shift_n = 19

racc_token_table = {
  false => 0,
  :error => 1,
  "draw" => 2,
  :WORD => 3,
  "as" => 4,
  "circle" => 5,
  :NUMBER => 6,
  "rectangle" => 7 }

racc_nt_base = 8

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "\"draw\"",
  "WORD",
  "\"as\"",
  "\"circle\"",
  "NUMBER",
  "\"rectangle\"",
  "$start",
  "target",
  "methods",
  "draw",
  "declare",
  "shape" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

# reduce 3 omitted

# reduce 4 omitted

module_eval(<<'.,.,', 'draw_bmp_parser.y', 9)
  def _reduce_5(val, _values, result)
     val[1].draw 
    result
  end
.,.,

module_eval(<<'.,.,', 'draw_bmp_parser.y', 11)
  def _reduce_6(val, _values, result)
     @shapes[val[0]] = val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'draw_bmp_parser.y', 13)
  def _reduce_7(val, _values, result)
     result = Circle.new val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'draw_bmp_parser.y', 14)
  def _reduce_8(val, _values, result)
     result = Rectangle.new val[1], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'draw_bmp_parser.y', 15)
  def _reduce_9(val, _values, result)
     result = @shapes[val[0]] 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class DrawShapeParser

if $0 == __FILE__
  parser = DrawShapeParser.new
  str = ARGV[0] || "draw circle 50 a as rectangle 2 3 draw a"
  puts 'Parsing: ' + str.to_s
  puts 'Result:'
  begin
    parser.parse(str)
  rescue ParseError
    puts $!
  end
  puts 'End:'
end
